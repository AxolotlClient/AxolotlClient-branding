plugins {
	id 'fabric-loom'
	id 'ploceus'
	id 'io.github.p03w.machete'
}

group = maven_group
version = "${project.version}+${project.minecraft_18}"
base.archivesName = "AxolotlClient"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

loom {
	accessWidenerPath.set(file("src/main/resources/axolotlclient.accesswidener"))

	mods {
		"axolotlclient" {
			sourceSet("main")
		}
		"axolotlclient-test" {
			sourceSet("test")
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_18}"
	mappings "net.ornithemc:feather:${project.mappings_18}"

	modImplementation "net.fabricmc:fabric-loader:${fabric_loader}"

	modImplementation("io.github.axolotlclient:AxolotlClient-config:${project.config}+${project.minecraft_18}") {
		exclude group: "org.lwjgl"
		exclude group: "org.slf4j"
	}
	include "io.github.axolotlclient:AxolotlClient-config:${project.config}+${project.minecraft_18}"
	modImplementation "io.github.axolotlclient.AxolotlClient-config:AxolotlClientConfig-common:${project.config}"

	ploceus.dependOsl(osl)

	modImplementation("com.terraformersmc:modmenu:0.1.1+mc1.8.9")

	implementation include(project(path: ":common", configuration: 'shadow'))

	modImplementation include("io.github.moehreag:search-in-resources:1.0.6+1.8.9")

	ext.lwjglVersion = "3.3.4"
	api("org.lwjgl:lwjgl-nanovg:$lwjglVersion")
	runtimeOnly("org.lwjgl:lwjgl-nanovg:${lwjglVersion}:natives-linux")
	runtimeOnly("org.lwjgl:lwjgl-nanovg:${lwjglVersion}:natives-linux-arm64")
	runtimeOnly("org.lwjgl:lwjgl-nanovg:${lwjglVersion}:natives-windows")
	runtimeOnly("org.lwjgl:lwjgl-nanovg:${lwjglVersion}:natives-windows-arm64")
	runtimeOnly("org.lwjgl:lwjgl-nanovg:${lwjglVersion}:natives-macos")
	runtimeOnly("org.lwjgl:lwjgl-nanovg:${lwjglVersion}:natives-macos-arm64")

	include("org.apache.logging.log4j:log4j-slf4j-impl:2.0-beta9") {
		exclude group: 'org.apache.logging.log4j', module: "log4j-api"
		exclude group: 'org.apache.logging.log4j', module: "log4j-core"
	}
	implementation include("org.slf4j:slf4j-api:1.7.36")
	localRuntime("org.slf4j:slf4j-jdk14:1.7.36")

	modCompileOnly("io.github.moehreag:legacy-lwjgl3:$legacy_lwgjl3") {
		exclude group: 'org.lwjgl', module: 'lwjgl-glfw'
		exclude group: 'org.lwjgl', module: 'lwjgl-openal'
		exclude group: 'org.lwjgl', module: 'lwjgl-opengl'
		exclude group: 'org.lwjgl', module: 'lwjgl'
		exclude group: 'net.fabricmc'
		exclude group: 'org.javassist'
	}
	modLocalRuntime("io.github.moehreag:legacy-lwjgl3:$legacy_lwgjl3:all-remapped") {
		exclude group: 'org.lwjgl', module: 'lwjgl-glfw'
		exclude group: 'org.lwjgl', module: 'lwjgl-openal'
		exclude group: 'org.lwjgl', module: 'lwjgl-opengl'
		exclude group: 'org.lwjgl', module: 'lwjgl'
		exclude group: 'net.fabricmc'
		exclude group: 'org.javassist'
	}
}

configurations.configureEach {
	resolutionStrategy {
		dependencySubstitution {
			substitute module('io.netty:netty-all:4.0.23.Final') using module('io.netty:netty-all:4.0.26.Final')
		}
		force 'io.netty:netty-all:4.0.26.Final'
	}
}

processResources {
	inputs.property 'version', version

	filesMatching('fabric.mod.json') {
		expand "version": version
	}
}

runClient {
	jvmArgs("-Dfabric.dli.main=net.fabricmc.loader.impl.launch.knot.KnotClient")
	classpath(sourceSets.test.runtimeClasspath)
}

java {
	withSourcesJar()
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = archivesBaseName
			from components.java
		}
	}

	repositories {
		maven {
			name = "owlMaven"
			def repository = project.version.toString().contains("beta") || project.version.toString().contains("alpha") ? "snapshots" : "releases"
			url = "https://moehreag.duckdns.org/maven/" + repository
			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "p2rxzX0q"
	versionNumber = "${project.version}"
	versionType = "release"
	uploadFile = remapJar
	gameVersions.set(["${project.minecraft_18}"])
	loaders.set(["fabric", "quilt"])
	additionalFiles.set([remapSourcesJar])
	dependencies {
		required.project "osl"
	}

	// Changelog fetching: Credit LambdAurora.
	// https://github.com/LambdAurora/LambDynamicLights/blob/1ef85f486084873b5d97b8a08df72f57859a3295/build.gradle#L145
	// License: MIT
	def changelogText = file('../CHANGELOG.md').text
	def regexVersion = ((String) project.version).split("\\+")[0].replaceAll('\\.', /\\./).replaceAll('\\+', '\\+')
	def changelogRegex = ~"###? ${regexVersion}\\n\\n(( *- .+\\n)+)"
	def matcher = changelogText =~ changelogRegex

	if (matcher.find()) {
		def changelogContent = matcher.group(1)

		def changelogLines = changelogText.split('\n')
		def linkRefRegex = ~'^\\[([A-z0-9 _\\-/+.]+)]: '
		for (int i = changelogLines.length - 1; i > 0; i--) {
			def line = changelogLines[i]
			if ((line =~ linkRefRegex).find())
				changelogContent += '\n' + line
			else break
		}
		changelog = changelogContent
	} else {
		afterEvaluate {
			tasks.modrinth.setEnabled(false)
		}
	}
}
