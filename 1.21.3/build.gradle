plugins {
	id 'fabric-loom'
	id 'io.github.p03w.machete'
}

group = maven_group
version = "${project.version}+${project.minecraft_1213}"
base.archivesName = "AxolotlClient"

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

loom {
	accessWidenerPath.set(file("src/main/resources/axolotlclient.accesswidener"))
	mods {
		"axolotlclient" {
			sourceSet("main")
		}
		"axolotlclient-test" {
			sourceSet("test")
		}
	}
}

repositories {
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_1213}"
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${project.mappings_1213}:intermediary-v2"
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-1.21.1:2024.11.13@zip")
	}

	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fapi_1213}+${project.minecraft_1213}"

	modImplementation("io.github.axolotlclient:AxolotlClient-config:${project.config}+${project.minecraft_1213}") {
		exclude group: "com.terraformersmc"
		exclude group: "org.lwjgl"
	}
	include "io.github.axolotlclient:AxolotlClient-config:${project.config}+${project.minecraft_1213}"
	modImplementation "io.github.axolotlclient.AxolotlClient-config:AxolotlClientConfig-common:${project.config}"

	modCompileOnlyApi("com.terraformersmc:modmenu:8.0.0") {
		exclude group: "net.fabricmc"
	}

	implementation include(project(path: ":common", configuration: 'shadow'))

	api("org.lwjgl:lwjgl-nanovg:3.3.3")
	runtimeOnly('org.lwjgl:lwjgl-nanovg:3.3.3:natives-linux')
	runtimeOnly('org.lwjgl:lwjgl-nanovg:3.3.3:natives-linux-arm64')
	runtimeOnly('org.lwjgl:lwjgl-nanovg:3.3.3:natives-windows')
	runtimeOnly('org.lwjgl:lwjgl-nanovg:3.3.3:natives-windows-arm64')
	runtimeOnly('org.lwjgl:lwjgl-nanovg:3.3.3:natives-macos')
	runtimeOnly('org.lwjgl:lwjgl-nanovg:3.3.3:natives-macos-arm64')
}

processResources {
	inputs.property 'version', version

	filesMatching('fabric.mod.json') {
		expand "version": version
	}
}

java {
	withSourcesJar()
}

runClient {
	classpath(sourceSets.test.runtimeClasspath)
	args("--tracy")
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = archivesBaseName
			from components.java
		}
	}

	repositories {
		maven {
			name = "owlMaven"
			def repository = project.version.toString().contains("beta") || project.version.toString().contains("alpha") ? "snapshots" : "releases"
			url = "https://moehreag.duckdns.org/maven/" + repository
			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "p2rxzX0q"
	versionNumber = "${project.version}"
	versionType = "release"
	uploadFile = remapJar
	gameVersions.set(["${project.minecraft_1213}"])
	loaders.set(["quilt", "fabric"])
	additionalFiles.set([remapSourcesJar])

	// Changelog fetching: Credit LambdAurora.
	// https://github.com/LambdAurora/LambDynamicLights/blob/1ef85f486084873b5d97b8a08df72f57859a3295/build.gradle#L145
	// License: MIT
	def changelogText = file('../CHANGELOG.md').text
	def regexVersion = ((String) project.version).split("\\+")[0].replaceAll('\\.', /\\./).replaceAll('\\+', '\\+')
	def changelogRegex = ~"###? ${regexVersion}\\n\\n(( *- .+\\n)+)"
	def matcher = changelogText =~ changelogRegex

	if (matcher.find()) {
		def changelogContent = matcher.group(1)

		def changelogLines = changelogText.split('\n')
		def linkRefRegex = ~'^\\[([A-z0-9 _\\-/+.]+)]: '
		for (int i = changelogLines.length - 1; i > 0; i--) {
			def line = changelogLines[i]
			if ((line =~ linkRefRegex).find())
				changelogContent += '\n' + line
			else break
		}
		changelog = changelogContent
	} else {
		afterEvaluate {
			tasks.modrinth.setEnabled(false)
		}
	}
}
