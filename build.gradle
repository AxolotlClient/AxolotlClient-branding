plugins {
	id 'fabric-loom' version "1.0-SNAPSHOT"
	id 'io.github.juuxel.loom-quiltflower' version '1.7.+' // For loom 0.8-0.9, 0.11+
	id 'maven-publish'
	id 'org.quiltmc.gradle.licenser' version '1.1.+'
	id 'com.modrinth.minotaur' version "2.+"
	id 'io.freefair.lombok' version "6.5.1"
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "legacy-fabric"
		url = "https://maven.legacyfabric.net"
	}

	maven {
		url 'https://repo.hypixel.net/repository/Hypixel/'
	}

	maven {
		url "https://moehreag.duckdns.org/maven/releases"
	}
	mavenLocal()
	maven { url 'https://jitpack.io' }
	mavenCentral()
}

loom {
	setIntermediaryUrl('https://maven.legacyfabric.net/net/fabricmc/intermediary/%1$s/intermediary-%1$s-v2.jar')
	accessWidenerPath = file("src/main/resources/axolotlclient.accesswidener")
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.legacyfabric:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation ("net.legacyfabric.legacy-fabric-api:legacy-fabric-api:${fabric_version}") {
		exclude module: "legacy-fabric-entity-events-v1"
	}

	// Hacks that make mac os work
	if (System.getProperty("os.name").toLowerCase().contains("mac")) {
		implementation 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209'
		implementation 'org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209'
		implementation 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
	}

	include( implementation('com.github.JnCrMx:discord-game-sdk4j:v0.5.5'))

	include(modImplementation("net.hypixel:hypixel-api-core:4.1") {
		exclude group: "com.google.code.gson", module: "gson"
		exclude group: "org.apache.httpcomponents", module: "httpclient"
	})
	include(modImplementation("net.hypixel:hypixel-api-transport-apache:4.1") {
		exclude group: "com.google.code.gson", module: "gson"
		exclude group: "org.apache.httpcomponents", module: "httpclient"
	})

	// modImplementation files("libs/legacy-modmenu-1.1.1-dev.jar") // Uncomment if you want modmenu in the dev env

	modImplementation include("com.github.moehreag:search-in-resources:1.0.2")
	modImplementation include("io.github.axolotlclient:AxolotlClient-config:${project.config_version}+${project.minecraft_version}")

	modApi("org.apache.logging.log4j:log4j-core:2.10.0")
}

// More hacks that make mac os work
if (System.getProperty("os.name").toLowerCase().contains("mac")) {
	configurations.configureEach {
		resolutionStrategy {
			dependencySubstitution {
				substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.2-nightly-201408222') using module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209')
				substitute module('org.lwjgl.lwjgl:lwjgl:2.9.2-nightly-201408222') using module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209')
			}
			force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
		}
	}
}

// Fix netty with Java 17+ (be happy if it didn't break for you)
configurations.configureEach {
	resolutionStrategy {
		dependencySubstitution {
			substitute module('io.netty:netty-all:4.0.23.Final') using module('io.netty:netty-all:4.0.26.Final')
		}
		force 'io.netty:netty-all:4.0.26.Final'
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

license {
	rule file('HEADER')
	include '**/*.java'
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	if (JavaVersion.current().isJava9Compatible()) it.options.release = 8
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		maven {
			name = "owlMaven"
			url = "https://moehreag.duckdns.org/maven/releases"
			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "p2rxzX0q"
	versionNumber = "${project.version}"
	versionType = "release"
	uploadFile = remapJar
	additionalFiles = [sourcesJar]
	gameVersions = ["${project.minecraft_version}"]
	loaders = ["fabric"]
	dependencies {
		required.project "legacy-fabric-api"
	}

	// Changelog fetching: Credit LambdAurora.
	// https://github.com/LambdAurora/LambDynamicLights/blob/1ef85f486084873b5d97b8a08df72f57859a3295/build.gradle#L145
	// License: MIT
	def changelogText = file('CHANGELOG.md').text
	def regexVersion = ((String) project.version).split("\\+")[0].replaceAll('\\.', /\\./).replaceAll('\\+', '\\+')
	def changelogRegex = ~"###? ${regexVersion}\\n\\n(( *- .+\\n)+)"
	def matcher = changelogText =~ changelogRegex

	if (matcher.find()) {
		def changelogContent = matcher.group(1)

		def changelogLines = changelogText.split('\n')
		def linkRefRegex = ~'^\\[([A-z0-9 _\\-/+.]+)]: '
		for (int i = changelogLines.length - 1; i > 0; i--) {
			def line = changelogLines[i]
			if ((line =~ linkRefRegex).find())
				changelogContent += '\n' + line
			else break
		}
		changelog = changelogContent
	} else {
		afterEvaluate {
			tasks.modrinth.setEnabled(false)
		}
	}
}
