package io.github.moehreag.branding;

import org.apache.hc.client5.http.classic.methods.HttpDelete;
import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;
import org.apache.hc.client5.http.io.HttpClientConnectionManager;
import org.apache.hc.client5.http.protocol.HttpClientContext;
import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;
import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactoryBuilder;
import org.apache.hc.core5.http.HttpResponse;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.apache.hc.core5.http.ssl.TLS;
import org.apache.hc.core5.ssl.SSLContexts;
import org.apache.hc.core5.ssl.TrustStrategy;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import java.io.IOException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.UUID;


public class NetworkHelperapache {
	
	public static boolean getOnline(UUID uuid){
		
		if (Axolotlclient.onlinePlayers.contains(uuid.toString())){
			return true;
		}
		try {
			return getUserOnline(uuid);
		} catch (IOException | NoSuchAlgorithmException | KeyStoreException | KeyManagementException e) {
			e.printStackTrace();
		}
		return  false;
	}



	public static boolean getUserOnline(UUID uuid) throws IOException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {

		// Trust standard CA and those trusted by our custom strategy
		final SSLContext sslcontext = SSLContexts.custom()
			.loadTrustMaterial(new TrustStrategy() {

				@Override
				public boolean isTrusted(
					final X509Certificate[] chain,
					final String authType) throws CertificateException {
					final X509Certificate cert = chain[0];
					return "CN=moehreag.duckdns.org".equalsIgnoreCase(cert.getSubjectDN().getName());
				}

			})
			.build();
		// Allow TLSv1.2 protocol only
		final SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder.create()
			.setSslContext(sslcontext)
			.setTlsVersions(TLS.V_1_2)
			.build();
		final HttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder.create()
			.setSSLSocketFactory(sslSocketFactory)
			.build();
		try (CloseableHttpClient httpclient = HttpClients.custom()
			.setConnectionManager(cm)
			.build()) {

			final HttpGet httpget = new HttpGet("https://moehreag.duckdns.org/axolotlclient-api?uuid="+ uuid);

			//System.out.println("Executing request " + httpget.getMethod() + " " + httpget.getUri());

			final HttpClientContext clientContext = HttpClientContext.create();
			try (CloseableHttpResponse response = httpclient.execute(httpget, clientContext)) {
				//System.out.println("----------------------------------------");
				//System.out.println(response.getCode() + " " + response.getReasonPhrase());
				//System.out.println(EntityUtils.toString(response.getEntity()));

				//Throw runtime exception if status code isn't 200
				if (response.getCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : "
						+ response.getCode() + " " + response.getReasonPhrase());
				}

				final SSLSession sslSession = clientContext.getSSLSession();

				if (response.toString().contains("online")){
					Axolotlclient.onlinePlayers = Axolotlclient.onlinePlayers.toString() + "\n" + uuid;return true;}
				return false;
			}
		}

	}

	public static void setOnline(UUID uuid) throws IOException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {

		// Trust standard CA and those trusted by our custom strategy
		final SSLContext sslcontext = SSLContexts.custom()
			.loadTrustMaterial(new TrustStrategy() {

				@Override
				public boolean isTrusted(
					final X509Certificate[] chain,
					final String authType) throws CertificateException {
					final X509Certificate cert = chain[0];
					return "CN=moehreag.duckdns.org".equalsIgnoreCase(cert.getSubjectDN().getName());
				}

			})
			.build();
		// Allow TLSv1.2 protocol only
		final SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder.create()
			.setSslContext(sslcontext)
			.setTlsVersions(TLS.V_1_2)
			.build();
		final HttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder.create()
			.setSSLSocketFactory(sslSocketFactory)
			.build();
		try (CloseableHttpClient httpclient = HttpClients.custom()
			.setConnectionManager(cm)
			.build()) {

			final HttpPost httppost = new HttpPost("https://moehreag.duckdns.org/axolotlclient-api");

			httppost.setHeader("Accept", "application/json");
			httppost.setHeader("Content-type", "application/json");


			String inputJson = "{\n" +
				"  \"uuid\": " + uuid + ",\n" +
				"  \"online\": true,\n" +
				"}";

			StringEntity stringEntity = new StringEntity(inputJson);
			httppost.setEntity(stringEntity);

			//System.out.println("Executing request " + httpPost.getMethod()+ " " + httpPost.getUri());

			HttpResponse response = httpclient.execute(httppost);

			//Throw runtime exception if status code isn't 200
			if (response.getCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : "
					+ response.getCode());
			}
			System.out.println("Response : \n" + response.toString());

		}

	}

	public static void setOffline(UUID uuid) throws IOException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {

		// Trust standard CA and those trusted by our custom strategy
		final SSLContext sslcontext = SSLContexts.custom()
			.loadTrustMaterial(new TrustStrategy() {

				@Override
				public boolean isTrusted(
					final X509Certificate[] chain,
					final String authType) throws CertificateException {
					final X509Certificate cert = chain[0];
					return "CN=moehreag.duckdns.org".equalsIgnoreCase(cert.getSubjectDN().getName());
				}

			})
			.build();
		// Allow TLSv1.2 protocol only
		final SSLConnectionSocketFactory sslSocketFactory = SSLConnectionSocketFactoryBuilder.create()
			.setSslContext(sslcontext)
			.setTlsVersions(TLS.V_1_2)
			.build();
		final HttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder.create()
			.setSSLSocketFactory(sslSocketFactory)
			.build();
		try (CloseableHttpClient httpclient = HttpClients.custom()
			.setConnectionManager(cm)
			.build()) {

			final HttpDelete httpdelete = new HttpDelete("https://moehreag.duckdns.org/axolotlclient-api?uuid="+ uuid);

			//System.out.println("Executing request " + httpget.getMethod() + " " + httpget.getUri());

			final HttpClientContext clientContext = HttpClientContext.create();
			try (CloseableHttpResponse response = httpclient.execute(httpdelete, clientContext)) {
				System.out.println("----------------------------------------");
				System.out.println(response.getCode() + " " + response.getReasonPhrase());
				//System.out.println(EntityUtils.toString(response.getEntity()));

				//Throw runtime exception if status code isn't 200
				if (response.getCode() != 200) {
					throw new RuntimeException("Failed : HTTP error code : "
						+ response.getCode() + " " + response.getReasonPhrase());
				}

				final SSLSession sslSession = clientContext.getSSLSession();
				if (sslSession != null) {
					System.out.println("SSL protocol " + sslSession.getProtocol());
					System.out.println("SSL cipher suite " + sslSession.getCipherSuite());
				}
			}
		}

	}

}
